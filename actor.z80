; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "actor", ROM0

;
; 0 Type and direction
; 1 Y velocity low
; 2 Y velocity high
; 3 Y low
; 4 Y high
; 5 X low
; 6 X high
; 7 State
; 8 Timer to reset state
; 9 Variable 1
; A Variable 2
; B Variable 3
; C Pixel position Y
; D Pixel position X
; E
; F
;

actor_type  = 0
actor_vyl   = 1
actor_vyh   = 2
actor_pyl   = 3
actor_pyh   = 4
actor_pxl   = 5
actor_pxh   = 6
actor_state = 7
actor_timer = 8
actor_var1  = 9
actor_var2  = 10
actor_var3  = 11
actor_pixely = 12
actor_pixelx = 13

astate_normal = 0
astate_stunned = 1
astate_paused = 2
astate_active = 3

actor_size  = 16

; --------------------------------------------

RunActors:
  xor a
  ld [EnemyCount], a

  ld d, actors>>8
  ld e, 0
.loop:
  ld a, [de]
  or a
  call nz, .call

  ld a, e
  add actor_size
  ret z
  ld e, a
  jr .loop

.call:
  add a ; multiply by 2, mask off direction bit
  ld h, ActorPointers>>8
  ld l, a

  ld a, [hl+]
  ld h, [hl]
  ld l, a
  jp hl

; --------------------------------------------

ActorNone:
  ret

ActorBlock:
;  ld hl, actor_pyl
;  add hl, de
;  ldh a, [PlayerPYL]
;  ld [hl+], a
;  ldh a, [PlayerPYH]
;  dec a
;  ld [hl+], a
;  ldh a, [PlayerPXL]
;  ld [hl+], a
;  ldh a, [PlayerPXH]
;  ld [hl], a

  ld a, $10
  call EnemyMoveForward

  call EnemyGravity
  call EnemyDespawnTimer

  ; Get block color
  ld hl, actor_var1
  add hl, de
  ld a, [hl]
  ld b, a

  ld a, $18
  jp DrawActorWithoutFlip

ActorNumberLeft:
  call ActorScreenPositionOffset

  ld h, sprites>>8
  ldh a, [oam_ptr]
  ld l, a
  add 4
  ldh [oam_ptr], a

  ld a, b
  ld [hl+], a
  ld a, c
  ld [hl+], a
  ldh a, [ChipsNeeded]
  add a ; *2
  or $80       ; tile number
  ld [hl+], a
  xor a        ; attribute
  ld [hl], a

  jp ActorPoof.IncreaseTimer

ActorPoof:
  call ActorScreenPositionOffset

  ld hl, actor_timer
  add hl, de
  push de
  ld d, [hl]       ; D = timer

  ld h, sprites>>8
  ldh a, [oam_ptr]
  ld l, a
  add 4*4
  ldh [oam_ptr], a

  ; Write the OAM
  ld a, b
  sub d
  ld [hl+], a
  ld a, c
  sub d
  ld [hl+], a
  ld a, $20
  ld [hl+], a
  xor a
  ld [hl+], a

  ld a, b
  sub d
  ld [hl+], a
  ld a, c
  add d
  ld [hl+], a
  ld a, $20
  ld [hl+], a
  xor a
  ld [hl+], a

  ld a, b
  add d
  ld [hl+], a
  ld a, c
  sub d
  ld [hl+], a
  ld a, $20
  ld [hl+], a
  xor a
  ld [hl+], a

  ld a, b
  add d
  ld [hl+], a
  ld a, c
  add d
  ld [hl+], a
  ld a, $20
  ld [hl+], a
  xor a
  ld [hl+], a
  pop de

.IncreaseTimer:
  ; Increase timer
  ld hl, actor_timer
  add hl, de
  inc [hl]
  ld a, [hl]
  cp 10
  ret nz

  ; Really clear out the actor
  xor a
  ld [de], a
  ret

ActorFireball:
  ret

ActorFlames:
  call EnemyFall
  jr c, .nowalk    ; walk -only- if in the air
  ld hl, actor_var1
  add hl, de
  ld a, [hl]
  call EnemyWalk
  call EnemyAutoBump
.nowalk:

  ; Flip
  ldh a, [retraces]
  and 8
  call z, EnemyTurnAround

  ld b, 0
  ld a, $1c
  call DrawActor

  ; Unflip
  ldh a, [retraces]
  and 8
  call z, EnemyTurnAround

  jp EnemyDespawnTimer

ActorBottle:
  call EnemyGravity

  call ActorScreenPositionOffset

  ld h, sprites>>8
  ldh a, [oam_ptr]
  ld l, a
  add 4
  ldh [oam_ptr], a

  ld a, b
  ld [hl+], a
  ld a, c
  ld [hl+], a
  ld a, $14   ; tile
  ld [hl+], a
  xor a       ; attribute
  ld [hl+], a

  jp EnemyDespawnTimer

ActorChip:
  ld a, $10
  call EnemyFlying

  ; No stunning
  ld hl, actor_state
  add hl, de
  ld [hl], 0

  ld a, $0c
  ld b, 3
  call DrawActorWithoutFlip

  call EnemyPlayerTouch
  ret nc

  ; Make the "chips left" counter
  call EnemyFindFree
  ret nc
  ; Copy in position
  push de
  ; Set type
  ld [hl], ACTOR_NUMBER_LEFT
  inc l
  inc e
  ld b, 7 ; Copy position bytes and state
.loop:
  ld a, [de]
  inc de
  ld [hl+], a
  dec b
  jr nz, .loop
  pop de
  ; Set timer
  ld [hl], low(-20)

  ; Decrement chips needed, signal level is complete if it's 0
  ldh a, [ChipsNeeded]
  or a
  jr z, .NotFinished
  dec a
  ldh [ChipsNeeded], a
  jr nz, .NotFinished
  ld a, 1
  ld [LevelComplete], a
.NotFinished:


  ; Go to a random spot
  ld hl, actor_pxl
  add hl, de
  xor a
  ld [hl+], a
  jp EnemyFlying.PickRandomSpot

ActorKey:
  ld a, $10
  ld b, 0
  jp DrawActorWithoutFlip

ActorPlodder:
  call EnemyFall
  jr nc, .nowalk
  ld a, $10
  call EnemyWalk
  call EnemyAutoBump
.nowalk:

  ld hl, .frames
  call EnemyFourFrameAnimation
  ld b, 0
  call DrawActor
  jp EnemyCommon
.frames:
  db $4c, $50, $54, $50

ActorSneaker:
  call EnemyFall
  jr nc, .nowalk
  ld a, $20
  call EnemyWalk
  call EnemyAutoBump
.nowalk:

  ldh a, [retraces]
  and 4
  add $40
  ld b, 0
  call DrawActor
  jp EnemyCommon

ActorSpinner:
  ld a, $10
  call EnemyFlying

  ; Display the frame
  call .flip_last_frames

  ld hl, .frames
  call EnemyFourFrameAnimation
  ld b, 0
  call DrawActor

  call .flip_last_frames
  jp EnemyCommon

.flip_last_frames:
  ldh a, [retraces]
  and 16
  jp nz, EnemyTurnAround
  ret

.frames:
  db $74, $78, $7c, $78

ActorOwl:
  ; Is it already in the air?
  call EnemyStandingOnSolid
  push af

  ; Don't walk while falling
  call EnemyFall
  jr nc, .nowalk

  ld a, $18
  call EnemyWalk
  call EnemyAutoBump

  ; Turn to face the player if the enemy landed, but was falling last frame
  pop af
  call nc, EnemyLookAtPlayer
  jr .skip
.nowalk:
  pop af
.skip:

  ldh a, [retraces]
  and 4
  add $58
  ld b, 0
  call DrawActor
  jp EnemyCommon

ActorGeorge:
  ld a, $70
  ld b, 0
  call DrawActor
  jp EnemyCommon

ActorBurger:
  ld a, $20
  call EnemyFlying

  ld a, $48
  ld b, 0
  call DrawActor
  jp EnemyCommon

ActorFireWalk:
  call EnemyFall
  jr nc, .nowalk
  ld a, $10
  call EnemyWalk
  call EnemyAutoBump
.nowalk:

  ; Throw flames sometimes
  ldh a, [retraces]
  and 15
  jr nz, .no_flames
  ; No flames if stunned
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  or a
  jr nz, .no_flames
  ; Find a slot
  call EnemyFindFree
  jr nc, .no_flames

  call GetRandomNumber
  and 128
  or ACTOR_FLAMES
  ld [hl+], a

  ; Y velocity
  ld [hl], low($-20)
  inc l
  ld [hl], high($-20)
  inc l
  ; X and Y position
  call EnemyCopyPosition
  inc l
  ld [hl], 32 ; timer
  inc l
  ; Random speed
  call GetRandomNumber
  and $1f
  add 5
  ld [hl], a ; X speed
.no_flames:

  ldh a, [retraces]
  and 4
  add $28
  ld b, 0
  call DrawActor
  jp EnemyCommon

ActorFireJump:
  call EnemyFall
  jr nc, .no_bounce
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  or a
  jr nz, .no_bounce

  ld hl, actor_vyl
  add hl, de
  ld [hl], low(-$40)
  inc l
  ld [hl], high(-$40)


  call EnemyFindFree
  jr nc, .no_bounce

  call GetRandomNumber
  and 128
  or ACTOR_FLAMES
  ld [hl+], a

  ; skip Y velocity
  inc l
  inc l
  ; X and Y position
  call EnemyCopyPosition
  inc l
  ld [hl], 20 ; timer
.no_bounce:

  ld a, $10
  call EnemyWalk
  call EnemyAutoBump

  ; Draw the enemy
  call .FlipSometimes
  ldh a, [retraces]
  rrca
  and %1100
  add $30
  ld b, 0
  call DrawActor
  call .FlipSometimes

  jp EnemyCommon

.FlipSometimes:
  ldh a, [retraces]
  and %100000
  ret z

  ; Flip horizontally and vertically
  call EnemyTurnAround

  ld hl, actor_state
  add hl, de
  ld a, [hl]
  xor 1
  ld [hl], a
  ret

ActorBallGuy:
  call EnemyFall
  jr nc, .no_bounce
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  or a
  jr nz, .no_bounce

  ld hl, actor_vyl
  add hl, de
  ld [hl], low(-$30)
  inc l
  ld [hl], high(-$30)
.no_bounce:

  ld a, $18
  call EnemyWalk
  call EnemyAutoBump

  ld a, $60
  ld b, 0
  call DrawActorWithoutFlip
  jp EnemyCommon

ActorBallRoll:
  ; Save old Y speed
  ld hl, actor_vyl
  add hl, de
  ld a, [hl+]
  ld c, a
  ld a, [hl]
  ld b, a

  push bc
  call EnemyFall
  pop bc
  jr nc, .no_bounce
  ld a, b
  or c
  jr z, .no_bounce

  ; Invert BC
  xor a
  sub c
  ld c, a
  ld a, 0
  sbc b
  ld b, a

  ; Divide by 4
  sra b
  rr c
  sra b
  rr c

  ; Write back modified Y speed
  ld hl, actor_vyl
  add hl, de
  ld a, c
  ld [hl+], a
  ld a, b
  ld [hl], a
.no_bounce:
  

  ld a, $20
  call EnemyWalk
  call EnemyAutoBump

  ld a, $68
  ld b, 0
  call DrawActorWithoutFlip
  jp EnemyCommon

ActorThwomp:
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  or a
  jr nz, .no_seek
  ; ---------------------------------------
  ; Drift over to the player's X
  ; ---------------------------------------
  ld hl, actor_pxh
  add hl, de
  ld c, [hl]
  dec l
  ldh a, [PlayerPXH]
  call .drift

  ; ---------------------------------------
  ; Drift over to the player's Y
  ; ---------------------------------------
  ld hl, actor_pyh
  add hl, de
  ld c, [hl]
  dec l
  ldh a, [PlayerPYH]
  sub 3
  call .drift

  ; Maybe get ready to start falling?
  ld hl, actor_var1
  add hl, de
  inc [hl]
  ld a, [hl]
  and 127
  jr nz, .did_seek
  ; Start the pausing so it can then fall
  ld hl, actor_state
  add hl, de
  ld [hl], astate_paused
  inc l
  ld [hl], 30 ; set timer

  jp .did_seek
  ; ---------------------------------------
.no_seek:
  ; Pause a bit before falling down
  ld hl, actor_state
  add hl, de
  ld a, [hl+]
  cp astate_paused
  jr nz, .not_paused

  ldh a, [retraces]
  rra
  call nc, EnemyTurnAround

  ; HL is now pointing at the timer  
  ; decrease the timer
  dec [hl]
  jr nz, .did_seek

  dec l
  ld [hl], astate_active ; start falling
  jr .did_seek
.not_paused:


  call EnemyFall
  jr nc, .did_seek

  ; Don't automatically cancel if stunned
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  dec a
  jr z, .did_seek
  ; Reset state
  ld [hl], 0
.did_seek:

  ld a, $64
  ld b, 0
  call DrawActor
  jp EnemyCommon

.drift:
  sub c

  ; Multiply a bit
  add a
  add a
  add a
  ld c, a

  ; Write new low X or Y
  ld a, [hl]
  add c
  ld [hl+], a ; move pointer back to high

  ; Sign extend
  push af ; save the carry flag
  ld a, c
  sex
  ld c, a
  pop af

  ; Write new high X or Y
  ld a, [hl]
  adc c
  ld [hl], a
  ret

ActorMine:
  ld a, $6c
  ld b, 0
  call DrawActorWithoutFlip
  jp EnemyCommon

; --------------------------------------------
EnemyFindFree:
  ld hl, actors
.loop:
  ld a, [hl]
  or a
  jr z, .success

  ld a, l
  add 16
  jr z, .fail
  ld l, a
  jr .loop

.success:
  ; Found a slot, so clear it before returning it
  push hl
  push bc
  xor a
  ld b, 16
.fill_loop:
  ld [hl+], a
  dec b
  jr nz, .fill_loop
  pop bc
  pop hl

  scf ; Return success
  ret
.fail:
  or a ; Return failure
  ret

EnemyDontMoveIfStunned:
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  or a
  ret z
  pop hl ; eat the return address
  ret

EnemyCopyPosition:
  push de
  ld a, e
  add actor_pyl
  ld e, a

  ; PYL
  ld a, [de]
  inc e
  ld [hl+], a
  ; PYH
  ld a, [de]
  inc e
  ld [hl+], a
  ; PXL
  ld a, [de]
  inc e
  ld [hl+], a
  ; PXH
  ld a, [de]
  inc e
  ld [hl+], a
  pop de
  ret

EnemyCommon:
  ; Increase enemy count
  ld hl, EnemyCount
  inc [hl]

  ; Decrease the timer if enemy state isn't neutral
  ld hl, actor_state
  add hl, de
  ld a, [hl+]
  cp astate_stunned
  jr nz, .not_stunned ; Normal state
  dec [hl]
  jr nz, .not_stunned
  dec l
  ld [hl], 0
.not_stunned:

; ----------------------

  ; Display off-screen indicator
  ld hl, actor_pixely
  add hl, de
  ld a, [hl+]
  ld b, a    ; B = Y position
  ld c, [hl] ; C = X position
  cp 144+16
  jr nc, .on_screen
  ld a, c
  cp 160+8
  jr c, .on_screen
.off_screen:

  ; Check X position
  ld a, c
  cp 160
  jr c, .no_x
  ld hl, actor_pxh
  add hl, de
  ldh a, [PlayerPXH]
  cp [hl]
  jr nc, .x_left
.x_right:
  ld c, 160+8-8-2
  ld a, [de]
  rla
  jp nc, .on_screen
  jr .no_x
.x_left:
  ld c, 8+2
  ld a, [de]
  rla
  jp c, .on_screen
.no_x:

  ld h, sprites>>8
  ldh a, [oam_ptr]
  ld l, a
  add 4
  ldh [oam_ptr], a

  ld a, b     ; Y
  ld [hl+], a
  ld a, c     ; X
  ld [hl+], a
  ld a, $22   ; tile
  ld [hl+], a

  ld a, [de]  ; Attribute, use direction to calculate it
  rra
  rra
  and OAM_XFLIP
  ld [hl], a
.on_screen:

  ; fall into the next routine
EnemyCollideWithBlocks:
  ; Convert the positions back
  ld hl, actor_pixely
  add hl, de

  ldh a, [CameraPY]
  add [hl]
  ld b, a ; B = non-scrolled pixel Y position

  inc l

  ldh a, [CameraPX]
  add [hl]
  ld c, a ; C = non-scrolled pixel X position

  ; Now look through the list
  ld hl, actors
.loop:
  ld a, [hl]
  and 127
  cp ACTOR_BLOCK
  jr nz, .next
  ; It's a block!
  ; Skip ahead to the block's pixel Y coordinate to test against the enemy's
  ld a, l
  or actor_pixely
  ld l, a

  ; Colliding vertically?
  ldh a, [CameraPY]
  add [hl]
  scf
  sbc b ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (16+16-1) ;Carry set if overlap
  jr nc, .reset

  inc l

  ; Colliding horizontally?
  ldh a, [CameraPX]
  add [hl]
  scf
  sbc c ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (16+16-1) ;Carry set if overlap
  jr nc, .reset

  ; Enemy hit by block!
  ld hl, actor_vyl
  add hl, de
  ; Set velocity to bump a bit
  ld a, low(-$10)
  ld [hl+], a
  ld a, high(-$10)
  ld [hl], a

  ; Stun for a bit
  ld hl, actor_state
  add hl, de
  ld [hl], astate_stunned
  inc l
  ld [hl], 180

  ret
.reset:
  ld a, l
  and $f0
  ld l, a
.next:
  ; next entry
  ld a, l
  add 16
  ld l, a
  jr nz, .loop

  ; No collisions with blocks. Now try against the player
EnemyCollideWithPlayer:
  ; B = non-scrolled pixel Y position
  ; C = non-scrolled pixel X position
  ; Collision based on http://atariage.com/forums/topic/71120-6502-killer-hacks/page-3?&#entry1054049

  ; Colliding vertically?
  ldh a, [PlayerPY]
  scf
  sbc b ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (24+16-1) ;Carry set if overlap
  ret nc

  ; Colliding horizontally?
  ldh a, [PlayerPX]
  add 4
  scf
  sbc c ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (8+16-1) ;Carry set if overlap
  ret nc

  ; If I reach there, there is a collision

  ; Damage player?
  ld hl, actor_state
  add hl, de
  ld a, [hl]
  cp astate_stunned
  jr z, .just_kill

  ; If touched while player is invincible, don't die
  ; and player isn't hurt
  ld a, [PlayerInvincible]
  or a
  ret nz

  ; Yes, damage player
  ld a, 160
  ld [PlayerInvincible], a

  cooldown [PlayerHealth]

.just_kill:
  ; Slight bump upwards
  ld a, low($-50)
  ldh [PlayerVYL], a
  ld a, high($-50)
  ldh [PlayerVYH], a

  ; Kill this enemy
  ld hl, actor_timer
  add hl, de
  ld [hl], 0

  ld a, ACTOR_POOF
  ld [de], a
  ret

EnemyPlayerTouch:
  ld hl, actor_pixely
  add hl, de

  ldh a, [CameraPY]
  add [hl]
  ld b, a ; B = non-scrolled pixel Y position
  inc l
  ldh a, [CameraPX]
  add [hl]
  ld c, a ; C = non-scrolled pixel X position

  ; Colliding vertically?
  ldh a, [PlayerPY]
  scf
  sbc b ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (24+16-1) ;Carry set if overlap
  ret nc

  ; Colliding horizontally?
  ldh a, [PlayerPX]
  add 4
  scf
  sbc c ; Note will subtract n-1
  sbc (16-1)
  ccf
  adc (8+16-1) ;Carry set if overlap
  ret nc
  scf
  ret

EnemyLookAtPlayer:
  ld hl, actor_pxh
  add hl, de
  ldh a, [PlayerPXH]
  cp [hl]
  jr nc, .right
.left:
  ld a, [de]
  or 128
  ld [de], a
  ret
.right:
  ld a, [de]
  and 127
  ld [de], a
  ret

EnemyTurnAround:
  ld a, [de]
  xor 128
  ld [de], a
  ret

EnemyFourFrameAnimation:
  ldh a, [retraces]
  rra
  rra
  rra
  and 3
  add_hl_a
  ld a, [hl] 
  ret

EnemyFlying:
  call EnemyMoveForward
  ld hl, actor_pxl
  add hl, de
  ld a, [hl+]
  or a
  ret z
  ld a, [hl]
  cp 15
  ret c
.PickRandomSpot:
  ; Pick left or right side
  ld [hl], 0
  ; Direction bit unset (right)
  ld a, [de]
  and 127
  ld [de], a
  call GetRandomNumber
  rra
  jr c, .right
  ld [hl], 15
  ; Direction bit set (left)
  ld a, [de]
  or 128
  ld [de], a
.right:

  dec l
  ; Clear PXL
  ld [hl], 0
  dec l

  ; Pick a random Y position
  ; and try until it works
  ldh a, [LevelHeight]
  ld b, a
.loop:
  call GetRandomNumber
  inc a
  and 15
  cp b
  jr nc, .loop

  ld [hl-], a
  xor a

  ld [hl], a

  ; Also pause the enemy for a moment
  ld hl, actor_state
  add hl, de
  ld [hl], astate_paused
  inc l
  ld [hl], 45
  ret

EnemyMoveForward:
  ld c, a
  call EnemyDontMoveIfStunned

  ld b, 0
  ld a, [de]
  rla
  jr nc, .no
  ; Negate C
  ld a, c
  cpl
  inc a
  ld c, a
  ; Negative, so high byte is $ff
  ld b, 255
.no:

  ld hl, actor_pxl
  add hl, de

  ld a, [hl]
  add c
  ld [hl+], a
  ld a, [hl]
  adc b
  ld [hl], a
  ret

EnemyWalk:
  call EnemyMoveForward

  ; When an enemy touches the side of the screen, move them to the top
  ld hl, actor_pxh
  add hl, de
  ld a, [hl]
  cp 15
  jr c, .no_move
  ; Move to the top middle
  ; X position
  ld a, 7
  ld [hl-], a
  ld a, $80
  ld [hl-], a
  ; Clear Y position
  xor a
  ld [hl-], a
  ld [hl-], a

  ; Randomly switch directions
  call GetRandomNumber
  rra
  call c, EnemyTurnAround
.no_move:

  ld hl, actor_pyl
  add hl, de
  ld a, [hl+] ; get middle of sprite Y pos
  add $80
  ld a, [hl+] ; HL = actor X low after this
  adc 0
  add a
  add a
  add a
  add a
  ld b, level_map>>8
  ld c, a

  ; make a decision based on direction
  ld a, [de]
  rla
  jr c, .left
.right:
  ld a, [hl+]
  add $f0
  ld a, [hl-]
  adc 0
  call .test
  ret nc
; Snap
  xor a
  ld [hl], a ; clear PXL
  scf
  ret

.left:
  inc l
  ld a, [hl-]
  call .test
  ret nc
; Snap
  xor a
  ld [hl+], a ; clear PXL
  ld a, [hl]
  inc a
  ld [hl], a ; increment PXH
  scf
  ret

.test:
  or c
  ld c, a
  ld a, [bc]
  call IsSolid
  ccf
  ret

EnemyAutoBump:
  ret nc
  jp EnemyTurnAround

EnemyFall:
  call EnemyGravity

  call EnemyStandingOnSolid
  ret nc

  ld hl, actor_vyl
  add hl, de
  xor a
  ld [hl+], a ; VYL
  ld [hl+], a ; VYH
  ld [hl], a  ; PYL
  scf
  ret

EnemyStandingOnSolid:
  ld hl, actor_vyh
  add hl, de
  ld a, [hl+] ; HL now = Y position, low
  rla
  jr nc, .positive
.no:
  or a
  ret
.positive;
  inc l ; HL now = Y position, high

  push de
  ld d, level_map>>8

  ld c, 0 ; bits for solidity
  ld a, [hl+] ; HL now = X position, low
  inc a ; one tile below
  add a
  add a
  add a
  add a
  ld b, a     ; hold onto it

  ; left
  inc l       ; get X position high
  ld a, [hl-] ; HL now = X position low
  add b
  ld e, a
  ld a, [de]
  call EnemyIsSolidOnTop
  ccf
  rl c

  ; right
  ld a, [hl+]
  add $f0
  ld a, [hl]
  adc 0
  add b
  ld e, a
  ld a, [de]
  call EnemyIsSolidOnTop
  ccf
  rl c
  
  pop de

  ; Carry = set if standing on something
  ld a, c
  or a
  jr z, .no
  scf
  ret


EnemyGravity:
  ld hl, actor_vyl
  add hl, de

  ld a, [hl]
  ld c, a
  add 4
  ld [hl+], a
  ld a, [hl]
  ld b, a
  adc 0
  ld [hl+], a

  ; Limit the speed
  ld a, b
  rla
  jr c, .GoingUp
  ld a, c
  cp $60
  blt .GoingUp
  ; Correct it
  dec l
  dec l
  ld a, $60
  ld [hl+], a
  inc l
.GoingUp:

  ; Apply gravity
  ld a, [hl]
  add c
  ld [hl+], a
  ld a, [hl]
  adc b
  ld [hl], a
  ret

EnemyDespawnTimer:
  ld hl, actor_timer
  add hl, de
  ld a, [hl]
  dec a
  ld [hl], a
  ret nz
; Clear enemy type
  xor a
  ld [de], a
  ret

; --------------------------------------------

ActorScreenPositionOffset:
  call ActorScreenPosition
  ldh a, [temp+0]
  add 4
  ld b, a          ; B = Y pos
  ldh a, [temp+1]
  add 4
  ld c, a          ; C = X pos
  ret

ActorScreenPosition:
  ld hl, actor_pyl
  add hl, de

  ldh a, [CameraPY]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 16
  sub c
  ldh [temp+0], a

  ldh a, [CameraPX]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 8
  sub c
  ldh [temp+1], a
  ret

DrawActorWithoutFlip:
  ; shift B to have zeros for the flip bits
  sla b
DrawActorFlipped:
  ld c, a
  ld a, [de] ; save direction
  push af

  ; Patch in direction bit
  add a
  srl b
  rra
  ld [de], a

  ld a, c
  call DrawActor

  pop af
  ld [de], a ; restore direction
  ret

DrawActor:
  ; Write the four tiles starting from this base tile
  ldh [temp+0], a
  add 2
  ldh [temp+1], a

  ld a, b
  ldh [temp+2], a ; attributes

  ld a, [de]
  rla
  jr nc, .no_horiz_flip
  hswap [temp+0], [temp+1]
  ld a, b
  or OAM_XFLIP
  ldh [temp+2], a
.no_horiz_flip:

  ld hl, actor_state
  add hl, de
  ld a, [hl]
  cp astate_stunned
  jr nz, .no_vert_flip
  ldh a, [temp+2]
  or OAM_YFLIP
  ldh [temp+2], a
.no_vert_flip:

; --------------------------------
  ; Convert X and Y positions
  ld hl, actor_pyl
  add hl, de

  ldh a, [CameraPY]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 16
  sub c
  ldh [temp+4], a

  ldh a, [CameraPX]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 8
  sub c

  push de

  ; Save the pixel coordinates first
  ld hl, actor_pixely
  add hl, de
  ; Now DE is saved so it can be overwritten freely

  ; D = X, E = Y
  ld d, a
  ldh a, [temp+4]
  ld e, a
  ; Cache pixel X and Y
  ld [hl+], a ; Y
  ld [hl], d  ; X
  
  ; Cancel if offscreen
  cp 144+16
  jr nc, .cancel
  ld a, d
  cp 160+8
  jr c, .nocancel
.cancel:
  pop de
  ret
.nocancel:

  ldh a, [temp+2]
  ld b, a ; B = attribute

  ld h, high(sprites)
  ldh a, [oam_ptr]
  ld l, a
; --------------------------------

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+0]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add 8
  ld [hl+], a ; X position
  ldh a, [temp+1]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute
skipdraw:

; --------------------------------
  pop de

  ld a, l
  ldh [oam_ptr], a
  ret

; --------------------------------------------
SECTION "actor_pointers", ROM0,ALIGN[8]
ActorPointers:
  dw ActorNone
  dw ActorBlock
  dw ActorPoof
  dw ActorFireball
  dw ActorFlames
  dw ActorBottle
  dw ActorChip
  dw ActorKey
; Selectable actors:
  dw ActorPlodder
  dw ActorSneaker
  dw ActorSpinner
  dw ActorOwl
  dw ActorGeorge
  dw ActorBurger
  dw ActorFireWalk
  dw ActorFireJump
  dw ActorBallGuy
  dw ActorBallRoll
  dw ActorThwomp
  dw ActorMine
; End of selectable actors
  dw ActorNumberLeft
