; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "actor", ROM0

;
; 0 Type and direction
; 1 Y velocity low
; 2 Y velocity high
; 3 Y low
; 4 Y high
; 5 X low
; 6 X high
; 7 State
; 8 Timer to reset state
; 9
; A
; B
; C
; D
; E
; F
;

actor_type  = 0
actor_vyl   = 1
actor_vyh   = 2
actor_pyl   = 3
actor_pyh   = 4
actor_pxl   = 5
actor_pxh   = 6
actor_state = 7
actor_timer = 8
actor_var1  = 9
actor_var2  = 10
actor_var3  = 11


actor_size  = 16

; --------------------------------------------

RunActors:
  ld a, ACTOR_SPINNER
  ld [actors], a
  ld a, 5
  ld [actors+actor_pyh], a

  ld d, actors>>8
  ld e, 0
.loop:
  ld a, [de]
  or a
  call nz, .call

  ld a, e
  add actor_size
  ret z
  ld e, a
  jr .loop

.call:
  add a ; multiply by 2, mask off direction bit
  ld h, ActorPointers>>8
  ld l, a

  ld a, [hl+]
  ld h, [hl]
  ld l, a
  jp hl

; --------------------------------------------

ActorNone:
  ret

ActorBlock:
;  ld hl, actor_pyl
;  add hl, de
;  ldh a, [PlayerPYL]
;  ld [hl+], a
;  ldh a, [PlayerPYH]
;  dec a
;  ld [hl+], a
;  ldh a, [PlayerPXL]
;  ld [hl+], a
;  ldh a, [PlayerPXH]
;  ld [hl], a

  ld a, $10
  call EnemyMoveForward

  call EnemyGravity
  call EnemyDespawnTimer

  ld a, $08
  jp DrawActorWithoutFlip


ActorPoof:
  ret

ActorFireball:
  ret

ActorFlames:
  ld a, $1c
  jp DrawActor

ActorBottle:
  ret

ActorChip:
  ld a, $0c
  jp DrawActorWithoutFlip

ActorKey:
  ld a, $10
  jp DrawActorWithoutFlip

ActorPlodder:
  ld hl, .frames
  call EnemyFourFrameAnimation
  jp DrawActor
.frames:
  db $4c, $50, $54, $50

ActorSneaker:
  ldh a, [retraces]
  and 4
  add $40
  jp DrawActor

ActorSpinner:
  ld a, $10
  call EnemyMoveForward

  ; Display the frame
  ldh a, [retraces]
  and 16
  call nz, EnemyTurnAround

  ld hl, .frames
  call EnemyFourFrameAnimation
  call DrawActor

  ldh a, [retraces]
  and 16
  call nz, EnemyTurnAround
  ret

.frames:
  db $74, $78, $7c, $78

ActorOwl:
  ldh a, [retraces]
  and 4
  add $58
  jp DrawActor

ActorGeorge:
  ld a, $70
  jp DrawActor

ActorBurger:
  ld a, $48
  jp DrawActor

ActorFireWalk:
  ldh a, [retraces]
  and 4
  add $28
  jp DrawActor

ActorFireJump:
  ret

ActorBallGuy:
  ld a, $60
  jp DrawActor

ActorBallRoll:
  ld a, $68
  jp DrawActor

ActorThwomp:
  ld a, $64
  jp DrawActor

ActorMine:
  ld a, $6c
  jp DrawActorWithoutFlip

; --------------------------------------------
EnemyFindFree:
  ld hl, actors
.loop:
  ld a, [hl]
  or a
  jr z, .success

  ld a, l
  add 16
  jr z, .fail
  ld l, a
  jr .loop

.success:
  ; Found a slot, so clear it before returning it
  push hl
  push bc
  xor a
  ld b, 16
.fill_loop:
  ld [hl+], a
  dec b
  jr nz, .fill_loop
  pop bc
  pop hl

  scf ; Return success
  ret
.fail:
  or a ; Return failure
  ret  

EnemyTurnAround:
  ld a, [de]
  xor 128
  ld [de], a
  ret

EnemyFourFrameAnimation:
  ldh a, [retraces]
  rra
  rra
  rra
  and 3
  add_hl_a
  ld a, [hl] 
  ret

EnemyMoveForward:
  ld c, a

  ld b, 0
  ld a, [de]
  rla
  jr nc, .no
  ; Negate C
  ld a, c
  cpl
  inc a
  ld c, a
  ; Negative, so high byte is $ff
  ld b, 255
.no:

  ld hl, actor_pxl
  add hl, de

  ld a, [hl]
  add c
  ld [hl+], a
  ld a, [hl]
  adc b
  ld [hl], a
  ret

EnemyGravity:
  ld hl, actor_vyl
  add hl, de

  ld a, [hl]
  ld c, a
  add 4
  ld [hl+], a
  ld a, [hl]
  ld b, a
  adc 0
  ld [hl+], a

  ; Limit the speed
  ld a, b
  and 128
  jr nz, .GoingUp
  ld a, c
  cp $60
  blt .GoingUp
  ; Correct it
  dec l
  dec l
  ld a, $60
  ld [hl+], a
  inc l
.GoingUp:

  ; Apply gravity
  ld a, [hl]
  add c
  ld [hl+], a
  ld a, [hl]
  adc b
  ld [hl], a
  ret

EnemyDespawnTimer:
  ld hl, actor_timer
  add hl, de
  ld a, [hl]
  dec a
  ld [hl], a
  ret nz
; Clear timer
  xor a
  ld [de], a
  ret

; --------------------------------------------

DrawActorWithoutFlip:
  ld b, 0
DrawActorFlipped:
  ld c, a
  ld a, [de] ; save direction
  push af

  ; Patch in direction bit
  add a
  srl b
  rra
  ld [de], a

  ld a, c
  call DrawActor

  pop af
  ld [de], a ; restore direction
  ret

DrawActor:
  ; Write the four tiles starting from this base tile
  ldh [temp+0], a
  inc a
  ldh [temp+1], a
  inc a
  ldh [temp+2], a
  inc a
  ldh [temp+3], a

  xor a
  ldh [temp+5], a ; attributes

  ld a, [de]
  rla
  jr nc, .no_horiz_flip
  hswap [temp+0], [temp+1]
  hswap [temp+2], [temp+3]
  ld a, OAM_XFLIP
  ldh [temp+5], a
.no_horiz_flip:

; --------------------------------
  ; Convert X and Y positions
  ld hl, actor_pyl
  add hl, de

  ldh a, [CameraPY]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 16
  sub c
  ldh [temp+4], a

  ldh a, [CameraPX]
  ld c, a
  ld a, [hl+]
  ld b, a
  ld a, [hl+]
  rept 4
    rra
    rr b
  endr
  ld a, b
  add 8
  sub c

  push de
  ld d, a
  ldh a, [temp+4]
  ld e, a
  ; D = X, E = Y
  ldh a, [temp+5]
  ld b, a ; B = attribute

  ld h, high(sprites)
  ldh a, [oam_ptr]
  ld l, a
; --------------------------------

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+0]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add 8
  ld [hl+], a ; X position
  ldh a, [temp+1]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+2]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld [hl+], a ; Y position
  ld a, d
  add 8
  ld [hl+], a ; X position
  ldh a, [temp+3]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute
skipdraw:

; --------------------------------
  pop de

  ld a, l
  ldh [oam_ptr], a
  ret

; --------------------------------------------
SECTION "actor_pointers", ROM0,ALIGN[8]
ActorPointers:
  dw ActorNone
  dw ActorBlock
  dw ActorPoof
  dw ActorFireball
  dw ActorFlames
  dw ActorBottle
  dw ActorChip
  dw ActorKey
  dw ActorPlodder
  dw ActorSneaker
  dw ActorSpinner
  dw ActorOwl
  dw ActorGeorge
  dw ActorBurger
  dw ActorFireWalk
  dw ActorFireJump
  dw ActorBallGuy
  dw ActorBallRoll
  dw ActorThwomp
  dw ActorMine
