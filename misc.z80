; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "miscellaneous", ROM0

ScreenOff:
  call wait_vblank
  xor a
  ldh [rLCDC], a
  ret

ScreenOn:
  ld a, LCDCF_ON|LCDCF_OBJ8|LCDCF_OBJON|LCDCF_BGON|LCDCF_BG8800
  ldh [rLCDC],a
  ret

vblank:
  push af
  ld a, [retraces]
  inc a
  ld [retraces], a
  pop af
  reti

wait_vblank:
  push hl
  push af
  ld a, %00001
  ldh [$FFFF],a     ; Enable vblank interrupt
  ei

  ld   hl, retraces
  ld   a, [hl]
.loop:
  halt
  cp   a, [hl]
  jr   z, .loop
  pop af
  pop hl
  ret

stat:
timer:
serial:
joypad:
  reti

memclear:
  xor a
  ld [hl+], a
  dec bc
  ld a,b
  or c
  jr nz, memclear
  ret

memset:
  ld a, e
  ld [hl+], a
  dec bc
  ld a,b
  or c
  jr nz, memset
  ret

memcpy:
  ld a, [hl+]
  ld [de], a
  inc de
  dec bc
  ld a,b
  or c
  jr nz, memcpy
  ret

memcpy8:
  ld a, [hl+]
  ld [de], a
  inc de
  dec c
  jr nz, memcpy8
  ret

memclear8:
  xor a
memset8:
  ld [hl+], a
  dec c
  jr nz, memset8
  ret

strcpy:
  ld a, [hl+]
  or a
  ret z
  ld [de], a
  inc de
  jr strcpy
  ret

oam_dma_routine:
  ldh [rDMA],a
  ld  a,$28
.wait:
  dec a
  jr  nz,.wait
  ret
oam_dma_routine_end:

readkeys:
  ld a, [KeyDown]
  ld [KeyLast], a

  ld a, KEY_BUTTONS
  ldh [rKEYS], a
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  and $f
  ld b, a

  ld a, KEY_DIRECTION
  ldh [rKEYS], a
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  and $f
  swap a
  or b
  cpl
  ld [KeyDown], a

  ld a, [KeyLast]
  cpl
  ld b, a
  ld a, [KeyDown]
  and b
  ld [KeyNew], a
  ret

DoKeyRepeat:
  ; Apply key repeat
  ld a, [KeyDown]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  ld b, a
  ld a, [KeyLast]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  cp b
  jr nz, .stop_repeat

  ld a, [KeyRepeat] ; Delay before auto-repeat
  cp 16
  jr nz, .no_repeat_yet
  ld a, [retraces]  ; Only repeat every 4 frames
  and 3
  ret nz

  ; Get the d-pad only
  ld a, [KeyDown]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  ld b, a
  ; repeat those directions
  ld a, [KeyNew]
  or b
  ld [KeyNew], a

  jr .did_repeat
.no_repeat_yet:
  ld a, [KeyRepeat]
  inc a
  ld [KeyRepeat], a
  ret
.stop_repeat:
  xor a
  ld [KeyRepeat],a
.did_repeat:
  ret

ClearNametable:
; Initialize nametables
  ld hl, SCREEN1
  ld bc, 1024*2
  ld e, " "
  jp memset

GetRandomNumber:
  ; Adapted from the random number generator used in Nova the Squirrel
  ; http://codebase64.org/doku.php?id=base:two_very_fast_16bit_pseudo_random_generators_as_lfsr
  ldh a, [InitializedRandom]
  or a
  jr nz, .already
  ldh a, [retraces]
  ld [random1+0], a
  inc a
  ld [random1+1], a
  inc a
  ld [random2+0], a
  inc a
  ld [random2+1], a
  ld a, 1
  ld [InitializedRandom], a
.already:

  push bc
  push de
  lda b, [random1+0]
  lda c, [random1+1]
  lda d, [random2+0]
  lda e, [random2+1]
  ; LFSR 1
  ld a,c
  add a
  add a
  xor c
  add a
  xor c
  add a
  add a
  xor c
  add a
  rl b         ;shift this left, "random" bit comes from low
  rl c
  ; LFSR 2
  ld a, e
  add a
  xor e
  add a
  add a
  rr d         ;shift this right, random bit comes from high - nicer when eor with random1
  rl e
  lda [random1+0], b
  lda [random1+1], c
  lda [random2+0], d
  lda [random2+1], e
  ld a, b
  xor d
  pop de
  pop bc

  ret

; -----------------------------------------

ClearOAM:
  ld hl, sprites
  xor a
  ldh [oam_ptr], a
.clear_sprites:
  ld [hl+], a
  inc l
  inc l
  inc l
  jr nz, .clear_sprites
  ret

InitGameBoyColor:
  xor a
  ldh [$FF4F], a ; VRAM bank
  ld a, 1
  ldh [$FF70], a ; WRAM bank
  ret

RGB_Color: MACRO
  dw \1 | (\2<<5) | (\3<<10)
ENDM

UploadTitlePalette:
  ldh a, [IsGameBoyColor]
  cp $11
  ret nz

  ld a, $80      ; index zero, auto increment
  ldh [$ff68], a ; background palette index
  ld hl, TitlePalette
  ld b, 2*4
.loop:
  ld a, [hl+]
  ld [$ff69], a
  dec b
  jr nz, .loop

; Now for sprites
  ld a, $80      ; index zero, auto increment
  ldh [$ff6a], a ; background palette index
  ld hl, TitlePalette
  ld b, 2*4
.loop2:
  ld a, [hl+]
  ld [$ff6b], a
  dec b
  jr nz, .loop2
  ret

TitlePalette:
  RGB_Color 31, 31, 31
  RGB_Color  0,  0,  0
  RGB_Color 13, 13, 13
  RGB_Color 22, 22, 22

UploadLevelPalette:
  ldh a, [IsGameBoyColor]
  cp $11
  ret nz

  ld a, $80      ; index zero, auto increment
  ldh [$ff68], a ; background palette index
  ld hl, BG_Palette
  ld b, 2*4*8
.loop:
  ld a, [hl+]
  ld [$ff69], a
  dec b
  jr nz, .loop

; Now for sprites
  ld a, $80      ; index zero, auto increment
  ldh [$ff6a], a ; background palette index
  ld hl, Sprite_Palette
  ld b, 2*4*8
.loop2:
  ld a, [hl+]
  ld [$ff6b], a
  dec b
  jr nz, .loop2
  ret

BG_Palette:
; Background palette
; 0 gray
  RGB_Color 17, 19, 31
  RGB_Color  7,  7,  7
  RGB_Color 13, 13, 13
  RGB_Color 22, 22, 22
; 1 grass
  RGB_Color 17, 19, 31
  RGB_Color  0, 10,  0
  RGB_Color 10, 31,  0 ; green
  RGB_Color 21, 10,  0 ; brown
; 2 red
  RGB_Color 17, 19, 31
  RGB_Color 10,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 10, 10
; 3 orange
  RGB_Color 17, 19, 31
  RGB_Color 15,  5,  0
  RGB_Color 31, 15,  0
  RGB_Color 31, 17, 10
; 4 blue, water
  RGB_Color 17, 19, 31
  RGB_Color  0,  0, 10
  RGB_Color  0,  0, 31
  RGB_Color 15, 15, 31
; 5
  RGB_Color 17, 19, 31
  RGB_Color  0,  0,  0
  RGB_Color 13, 13, 13
  RGB_Color 22, 22, 22
; 6
  RGB_Color 17, 19, 31
  RGB_Color  0,  0,  0
  RGB_Color 13, 13, 13
  RGB_Color 22, 22, 22
; 7 inverted
  RGB_Color  0,  0,  0
  RGB_Color 31, 31, 31
  RGB_Color 22, 22, 22
  RGB_Color 13, 13, 13

Sprite_Palette:
; Sprite palette
; 0 red
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 31, 31
; 1 green
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color  0, 31,  0
  RGB_Color 31, 31, 31
; 2 blue
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color  0,  0, 31
  RGB_Color 31, 31, 31
; 3 yellow
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31, 15,  0
  RGB_Color 31, 31, 31
; 4
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 31, 31
; 5
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 31, 31
; 6
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 31, 31
; 7
  RGB_Color  0,  0,  0
  RGB_Color  0,  0,  0
  RGB_Color 31,  0,  0
  RGB_Color 31, 31, 31

RainbowCopy:
  ld a, [RainbowRGBCIndex]
  ldh [$ff6a], a ; sprite palette index
  ld a, [RainbowRGBData+0]
  ldh [$ff6b], a
  ld a, [RainbowRGBData+1]
  ldh [$ff6b], a
  ret

RainbowLUT:
  RGB_Color 31, 0, 0
  RGB_Color 31, 6, 0
  RGB_Color 31, 12, 0
  RGB_Color 31, 17, 0
  RGB_Color 31, 23, 0
  RGB_Color 31, 29, 0
  RGB_Color 27, 31, 0
  RGB_Color 21, 31, 0
  RGB_Color 16, 31, 0
  RGB_Color 10, 31, 0
  RGB_Color 4, 31, 0
  RGB_Color 0, 31, 2
  RGB_Color 0, 31, 8
  RGB_Color 0, 31, 14
  RGB_Color 0, 31, 19
  RGB_Color 0, 31, 25
  RGB_Color 0, 31, 31
  RGB_Color 0, 25, 31
  RGB_Color 0, 19, 31
  RGB_Color 0, 14, 31
  RGB_Color 0, 8, 31
  RGB_Color 0, 2, 31
  RGB_Color 4, 0, 31
  RGB_Color 10, 0, 31
  RGB_Color 15, 0, 31
  RGB_Color 21, 0, 31
  RGB_Color 27, 0, 31
  RGB_Color 31, 0, 29
  RGB_Color 31, 0, 23
  RGB_Color 31, 0, 17
  RGB_Color 31, 0, 12
  RGB_Color 31, 0, 6
