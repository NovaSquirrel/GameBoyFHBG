; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "player", ROM0

COLLISION_OFFX = $40


RunPlayer:
  cooldown [OfferJumpTimer]
  cooldown [PlayerShootCooldown]
  cooldown [PlayerInvincible]

  ; Jump cancel
  ldh a, [KeyDown]
  and KEY_A
  jr nz, .no_jump_cancel
  ld a, [PlayerJumpCancel]
  or a
  jr nz, .no_jump_cancel
  ldh a, [PlayerVYH]
  rla
  jr nc, .no_jump_cancel

  ; Smooth the jump cancel out
  ld a, low(-$20)
  ldh [PlayerVYL], a
  ld a, high(-$20)
  ldh [PlayerVYH], a

  ld a, 1
  ld [PlayerJumpCancel], a
.no_jump_cancel:


  ; Shoot blocks
  ldh a, [KeyNew] ;or KeyDown
  and KEY_B
  jr z, .NotShoot
  ld a, [PlayerShootCooldown]
  or a
  jr nz, .NotShoot
  call EnemyFindFree
  jr nc, .NotShoot
  ldh a, [PlayerDir]
  or ACTOR_BLOCK
  ld [hl+], a

  ; Set Y velocity
  ld a, low(-$20)
  ld [hl+], a
  ld a, high(-$20)
  ld [hl+], a

  ; Position above player's head
  ldh a, [PlayerPYL]
  ld [hl+], a
  ldh a, [PlayerPYH]
  dec a
  ld [hl+], a
  ldh a, [PlayerPXL]
  ld [hl+], a
  ldh a, [PlayerPXH]
  ld [hl+], a
  inc l       ; point at the timer
  ld a, 35
  ld [hl+], a ; points at var1 now

  ; Switch to the other palette
  ld a, [RainbowRGBPIndex]
  push af
  xor 1
  ld [RainbowRGBPIndex], a
  pop af
  ld [hl], a ; set var1

  ; Next rainbow LUT index
  ld a, [RainbowRGBTIndex]
  inc a
  and 31
  ld [RainbowRGBTIndex], a
  ; Also calculate the LUT
  add a
  ld hl, RainbowLUT
  add_hl_a
  ld a, [hl+]
  ld [RainbowRGBData+0], a
  ld a, [hl]
  ld [RainbowRGBData+1], a

  ld a, [RainbowRGBCIndex]
  xor 8
  ld [RainbowRGBCIndex], a

  ld a, 20
  ld [PlayerShootCooldown], a
.NotShoot:



  ; React to key inputs
  ldh a, [KeyDown]
  ld b, a

  ld a, [PlayerClimbing]
  or a
  jr z, .NotClimbing
  bit 7, b
  jr z, .NotDown
  ldh a, [PlayerPYL]
  add 32
  ldh [PlayerPYL], a
  ld [PlayerScrollPYL], a
  ldh a, [PlayerPYH]
  adc 0
  ldh [PlayerPYH], a
  ld [PlayerScrollPYH], a
.NotDown:

  bit 6, b
  jr z, .NotUp
  ldh a, [PlayerPYL]
  sub 32
  ldh [PlayerPYL], a
  ld [PlayerScrollPYL], a
  ldh a, [PlayerPYH]
  sbc 0
  ldh [PlayerPYH], a
  ld [PlayerScrollPYH], a
.NotUp:
.NotClimbing:

  bit 5, b
  jr z, .NotLeft
  ldh a, [PlayerPXL]
  sub 24
  ldh [PlayerPXL], a
  ldh a, [PlayerPXH]
  sbc 0
  ldh [PlayerPXH], a

  ld a, $80
  ldh [PlayerDir], a

  ; Test wall collision
  ld h, level_map>>8
  call PlayerGetMiddle
  call PlayerGetLeft
  call IsSolid
  jr c, .NotLeft
  ld a, $100 - COLLISION_OFFX
  ldh [PlayerPXL],a
.NotLeft:

  bit 4, b
  jr z, .NotRight
  ldh a, [PlayerPXL]
  add 24
  ldh [PlayerPXL], a
  ldh a, [PlayerPXH]
  adc 0
  ldh [PlayerPXH], a

  xor a
  ldh [PlayerDir], a

  ; Test wall collision
  ld h, level_map>>8
  call PlayerGetMiddle
  call PlayerGetRight
  call IsSolid
  jr c, .NotRight
  ld a, COLLISION_OFFX
  ldh [PlayerPXL],a
.NotRight:

  ; Keep the player within the playfield horizontally
  ldh a, [PlayerPXH]
  or a
  jr nz, .NoFixLeft
  ldh a, [PlayerPXL]
  cp $20
  jr nc, .NoFixLeft
  ld a, $20
  ldh [PlayerPXL], a
.NoFixLeft:

  ldh a, [PlayerPXH]
  cp 15
  jr nz, .NoFixRight
  xor a
  ldh [PlayerPXL], a
.NoFixRight:


  ld a, [PlayerClimbing]
  or a
  jr nz, .PlayerNoGravity

  ; Increase gravity
  ldh a, [PlayerVYL]
  ld c, a
  add 4
  ldh [PlayerVYL], a
  ldh a, [PlayerVYH]
  ld b, a
  adc 0
  ldh [PlayerVYH], a

  ; Limit the speed
  ld a, b
  rla
  jr c, .GoingUp
  ld a, c
  cp $60
  blt .GoingUp
  ; Correct it
  ld a, $60
  ldh [PlayerVYL], a
.GoingUp:

  ; Apply gravity
  ldh a, [PlayerPYL]
  add c
  ldh [PlayerPYL], a
  ldh a, [PlayerPYH]
  adc b
  and 15
  ldh [PlayerPYH], a
.PlayerNoGravity:

  call PlayerLevelCollision

LadderCollision:
  ld h, level_map>>8
  call PlayerGetMiddle
  call PlayerGetMiddleX
  cp BLOCK_SPRING
  jr nz, .not_spring
    ld a, low(-$54)
    ldh [PlayerVYL],a
    ld a, high(-$54)
    ldh [PlayerVYH],a
  jr .was_ladder
.not_spring:
  cp BLOCK_LADDER
  jr z, .yes

  call PlayerGetBottom
  call PlayerGetMiddleX
  cp BLOCK_LADDER
  jr nz, .not_ladder

.yes:
  call OfferJump
  ldh a, [KeyDown]
  and KEY_UP|KEY_DOWN
  jr z, .was_ladder
  xor a
  ldh [PlayerVYL], a
  ldh [PlayerVYH], a
  ld a, 1
  ld [PlayerClimbing], a
  jr .was_ladder

.not_ladder:
  xor a
  ld [PlayerClimbing], a
.was_ladder:

DrawPlayer:
  ld a, [PlayerInvincible]
  rra
  ret c

  ld h, high(sprites)
  ldh a, [oam_ptr]
  ld l, a

  ; Convert X and Y positions
  ldh a, [CameraPX]
  ld c, a
  ldh a, [PlayerPXH]
  ld b, a
  ldh a, [PlayerPXL]
  rept 4
    srl b
    rra
  endr
  add 8
  ldh [PlayerPX], a
  sub c
  ld d, a

  ldh a, [CameraPY]
  ld c, a
  ldh a, [PlayerPYH]
  ld b, a
  ldh a, [PlayerPYL]
  rept 4
    srl b
    rra
  endr
  add 16
  ldh [PlayerPY], a
  sub c
  ld e, a

  ; Write a default tile list
  xor a
  ldh [temp+0], a
  add 2
  ldh [temp+1], a
  add 2
  ldh [temp+2], a
  add 2
  ldh [temp+3], a

  ; Animate walking
  ldh a, [KeyDown]
  and KEY_LEFT | KEY_RIGHT
  jr z, .NoWalking

  push hl
  ldh a, [retraces]
  srl a
  srl a
  and %110
  ld hl, WalkLegAnim
  add_hl_a
  ld a, [hl+]
  ldh [temp+2], a
  ld a, [hl]
  ldh [temp+3], a
  pop hl
.NoWalking:

  ; If facing left, swap
  ld b, 0
  ldh a, [PlayerDir]
  or a
  jr z, .NoFlip
  ld b, OAM_XFLIP
  ld a, 0
  hswap [temp+0], [temp+1]
  hswap [temp+2], [temp+3]
.NoFlip:

; --------------------------------
  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+0]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ldh a, [temp+1]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  add 16
  ld e, a

; --------------------------------
  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+2]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ldh a, [temp+3]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute


; --------------------------------
  ld a, l
  ldh [oam_ptr], a

; Display block above player's head if they have one to shoot
  ld a, [PlayerShootCooldown]
  or a
  ret nz

  ld a, [RainbowRGBPIndex]
  ld b, a

  ld a, e
  sub 32
  ld e, a
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ld a, $18
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ld a, $1a
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, l
  ldh [oam_ptr], a
  ret

WalkLegAnim:
  db 4, 6
  db 8, 6
  db 4, 6
  db 4, 10

; --------------------------------
PlayerLevelCollision:
  ; Background collision
  ld h, level_map>>8
  ld b, 0 ; collision bits

  call PlayerGetTop
  call PlayerGetLeft
  call IsSolid
  rl b
  call PlayerGetTop
  call PlayerGetRight
  call IsSolid
  rl b
  call PlayerGetBottom
  call PlayerGetLeft
  call .is_solid_bottom
  rl b
  call PlayerGetBottom
  call PlayerGetRight
  call .is_solid_bottom
  rl b

  ; Set off the appropriate reaction
  ld a, b
  xor 15  ; fix the inverted carry
  add a,a ; *2 for addresses
  ld hl, .reactions
  add_hl_a
  ld a, [hl+]
  ld h, [hl]
  ld l, a
  jp hl

.going_up:
  pop af
  scf
  ret
.is_solid_bottom:
  push af
  ldh a, [PlayerVYH]
  rla
  jr c, .going_up

  ; If you're not climbing, and the ladder has a solid block
  ; to the left or right, then it's solid on the top.
  ld a, [PlayerClimbing]
  or a
  jr nz, .is_climbing
  pop af   ; Get the value on the stack (block number)
  push af
  cp BLOCK_LADDER
  jr nz, .is_climbing
  ; Check the left and right
  dec l
  ld a, [hl+]
  call IsSolidOnTop
  jr nc, .yes_from_ladder
  inc l
  ld a, [hl]
  call IsSolidOnTop
  jr nc, .yes_from_ladder
.is_climbing:

  ldh a, [PlayerPYL]
  rla
  jp nc, SolidAllInstead

  pop af
  push hl
  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  cp 64
.yes_from_ladder:
  pop hl ; pops wrong register pair when branching here
  ret    ; but that doesn't matter

.reactions:
  dw .reaction____________
  dw .reaction__________dr
  dw .reaction_______dl___
  dw .reaction_______dl_dr
  dw .reaction____ur______
  dw .reaction____ur____dr
  dw .reaction____ur_dl___
  dw .reaction____ur_dl_dr
  dw .reaction_ul_________
  dw .reaction_ul_______dr
  dw .reaction_ul____dl___
  dw .reaction_ul____dl_dr
  dw .reaction_ul_ur______
  dw .reaction_ul_ur____dr
  dw .reaction_ul_ur_dl___
  dw .reaction_ul_ur_dl_dr

.reaction____ur_dl___:
.reaction_ul_______dr:
.reaction_ul_ur_dl_dr:
  ret

.reaction____________:
  ld a, [OfferJumpTimer]
  or a
  jp nz, OfferJumpFromGracePeriod
  ret

; Ceiling and wall
.reaction_ul_ur____dr:
  call .reaction_ul_______dr
  jp   .reaction_ul_ur______

.reaction_ul_ur_dl___:
  call .reaction_ul____dl___
  jp   .reaction_ul_ur______

; Utilities for ceiling checks
.check_ll:
  call PlayerGetBottom
  ldh a, [PlayerPXL]
  add COLLISION_OFFX-$10
.check_l_common:
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  jp IsSolid
.check_lr:
  call PlayerGetBottom
  ldh a, [PlayerPXL]
  add $100-COLLISION_OFFX+$10
  jr .check_l_common

; Ceiling checks
.reaction_ul_________:
  ldh a, [PlayerVYH]
  rla
  ret nc

  call .check_ll
  jr nc, .reaction_ul_________skip
    xor a
    ldh [PlayerVYL],a
    ldh [PlayerVYH],a
.reaction_ul_________skip:
  call .check_lr
  jp c, .reaction_ul____dl___
  ret
.reaction____ur______:
  ldh a, [PlayerVYH]
  rla
  ret nc

  call .check_lr
  jr nc, .reaction____ur______skip
    xor a
    ldh [PlayerVYL],a
    ldh [PlayerVYH],a
.reaction____ur______skip:
  call .check_ll
  jp c, .reaction____ur____dr
  ret
.reaction_ul_ur______:
  ld a, 10
  ldh [PlayerVYL], a
  xor a
  ldh [PlayerVYH], a
  ret

; Wall+Ground reactions
.reaction_ul____dl_dr:
  call .reaction_______dl_dr
  jp   .reaction_ul____dl___

.reaction____ur_dl_dr:
  call .reaction_______dl_dr
  jp   .reaction____ur____dr

; Wall reactions
.reaction____ur____dr:
  ld a, COLLISION_OFFX
  ldh [PlayerPXL],a
  ret
.reaction_ul____dl___:
  ld a, $100 - COLLISION_OFFX
  ldh [PlayerPXL],a
;  ldh a, [PlayerPXH]
;  inc a
;  ldh [PlayerPXH],a
  ret

; Ground reactions
.reaction__________dr:
.reaction_______dl___:
.reaction_______dl_dr:
  xor a
  ldh [PlayerVYL], a
  ldh [PlayerVYH], a

  ldh a, [PlayerPYL]
  ld [PlayerScrollPYL], a
  ldh a, [PlayerPYH]
  ld [PlayerScrollPYH], a

  ldh a, [PlayerPYL]
  rla
  jr c, .reaction_ground_skip
    ldh a, [PlayerPYH]
    dec a
    ldh [PlayerPYH], a
.reaction_ground_skip
  ld a, 128
  ldh [PlayerPYL], a

OfferJump:
  ld a, 6
  ld [OfferJumpTimer], a
OfferJumpFromGracePeriod:
  ldh a, [KeyNew]
  and KEY_A
  ret z
  ld a, low(-$44)
  ldh [PlayerVYL],a
  ld a, high(-$44)
  ldh [PlayerVYH],a
  xor a
  ld [OfferJumpTimer], a
  ld [PlayerJumpCancel], a
  ld [PlayerClimbing], a
  ret

; These four routines assist with player/level collision
PlayerGetTop:
  ldh a, [PlayerPYL]
  add $80
  ldh a, [PlayerPYH]
  adc 0
.get_top_shift:
  add a
  add a
  add a
  add a
  ld l, a
  ret
PlayerGetBottom:
  ldh a, [PlayerPYL]
  add $80
  ldh a, [PlayerPYH]
  adc 1
  jr PlayerGetTop.get_top_shift
PlayerGetMiddle:
  ldh a, [PlayerPYH]
  inc a
  jr PlayerGetTop.get_top_shift

PlayerGetLeft:
  ldh a, [PlayerPXL]
  add COLLISION_OFFX
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  ret
PlayerGetRight:
  ldh a, [PlayerPXL]
  add $ff - COLLISION_OFFX
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  ret
PlayerGetMiddleX:
  ldh a, [PlayerPXL]
  add $80
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  ret

SolidAllInstead:
  pop af
IsSolid: ; carry = clear if solid, set if nonsolid
  push hl
  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  cp 128
  pop hl
  ret
EnemyIsSolidOnTop: ; carry = clear if solid, set if nonsolid
  cp BLOCK_LADDER
  jr z, IsSolidOnTop.is_ladder
IsSolidOnTop: ; carry = clear if solid, set if nonsolid
  push hl
  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  cp 64
  pop hl
  ret
.is_ladder:
  or a
  ret
