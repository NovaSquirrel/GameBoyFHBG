; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "player", ROM0

COLLISION_OFFX = $40


RunPlayer:
  cooldown [OfferJumpTimer]
  cooldown [PlayerShootCooldown]

  ; React to key inputs
  ldh a, [KeyDown]
  ld b, a

;  bit 7, b
;  jr z, .NotDown
;  ldh a, [PlayerPYL]
;  add 16
;  ldh [PlayerPYL], a
;  ldh a, [PlayerPYH]
;  adc 0
;  ldh [PlayerPYH], a
;.NotDown:

;  bit 6, b
;  jr z, .NotUp
;  ldh a, [PlayerPYL]
;  sub 16
;  ldh [PlayerPYL], a
;  ldh a, [PlayerPYH]
;  sbc 0
;  ldh [PlayerPYH], a
;.NotUp:

  ldh a, [KeyDown] ;or KeyNew
  and KEY_B
  jr z, .NotShoot
  ld a, [PlayerShootCooldown]
  or a
  jr nz, .NotShoot
  call EnemyFindFree
  jr nc, .NotShoot
  ldh a, [PlayerDir]
  or ACTOR_BLOCK*2
  ld [hl+], a

  ld a, low(-$20)
  ld [hl+], a
  ld a, high(-$20)
  ld [hl+], a

  ldh a, [PlayerPYL]
  ld [hl+], a
  ldh a, [PlayerPYH]
  dec a
  ld [hl+], a
  ldh a, [PlayerPXL]
  ld [hl+], a
  ldh a, [PlayerPXH]
  ld [hl+], a
  inc l       ; point at the timer
  ld a, 35
  ld [hl], a
  ld [PlayerShootCooldown], a
.NotShoot:



  bit 5, b
  jr z, .NotLeft
  ldh a, [PlayerPXL]
  sub 16
  ldh [PlayerPXL], a
  ldh a, [PlayerPXH]
  sbc 0
  ldh [PlayerPXH], a

  ld a, 1
  ldh [PlayerDir], a
.NotLeft:

  bit 4, b
  jr z, .NotRight
  ldh a, [PlayerPXL]
  add 16
  ldh [PlayerPXL], a
  ldh a, [PlayerPXH]
  adc 0
  ldh [PlayerPXH], a

  xor a
  ldh [PlayerDir], a
.NotRight:

  ; Increase gravity
  ldh a, [PlayerVYL]
  ld c, a
  add 4
  ldh [PlayerVYL], a
  ldh a, [PlayerVYH]
  ld b, a
  adc 0
  ldh [PlayerVYH], a

  ; Limit the speed
  ld a, b
  and 128
  jr nz, .GoingUp
  ld a, c
  cp $60
  blt .GoingUp
  ; Correct it
  ld a, $60
  ldh [PlayerVYL], a
.GoingUp:

  ; Apply gravity
  ldh a, [PlayerPYL]
  add c
  ldh [PlayerPYL], a
  ldh a, [PlayerPYH]
  adc b
  ldh [PlayerPYH], a

  call PlayerLevelCollision

DrawPlayer:
  ld h, high(sprites)
  ldh a, [oam_ptr]
  ld l, a

  ; Convert X and Y positions
  ldh a, [CameraPX]
  ld c, a
  ldh a, [PlayerPXH]
  ld b, a
  ldh a, [PlayerPXL]
  rept 4
    srl b
    rra
  endr
  ldh [PlayerPX], a
  add 8
  sub c
  ld d, a

  ldh a, [CameraPY]
  ld c, a
  ldh a, [PlayerPYH]
  ld b, a
  ldh a, [PlayerPYL]
  rept 4
    srl b
    rra
  endr
  ldh [PlayerPY], a
  add 16
  sub c
  ld e, a

  ; Write a default tile list
  xor a
  ldh [temp+0], a
  inc a
  ldh [temp+1], a
  inc a
  ldh [temp+2], a
  inc a
  ldh [temp+3], a
  inc a
  ldh [temp+4], a
  inc a
  ldh [temp+5], a

  ; Animate walking
  ldh a, [KeyDown]
  and KEY_LEFT | KEY_RIGHT
  jr z, .NoWalking

  push hl
  ldh a, [retraces]
  srl a
  srl a
  and %110
  ld hl, WalkLegAnim
  add_hl_a
  ld a, [hl+]
  ldh [temp+4], a
  ld a, [hl]
  ldh [temp+5], a
  pop hl
.NoWalking:

  ; If facing left, swap
  ld b, 0
  ldh a, [PlayerDir]
  or a
  jr z, .NoFlip
  ld b, OAM_XFLIP
  ld a, 0
  hswap [temp+0], [temp+1]
  hswap [temp+2], [temp+3]
  hswap [temp+4], [temp+5]
.NoFlip:

; --------------------------------
  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+0]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ldh a, [temp+1]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld e, a

; --------------------------------
  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+2]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ldh a, [temp+3]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld e, a

; --------------------------------

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ldh a, [temp+4]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ldh a, [temp+5]
  ld [hl+],a ; set tile number
  ld a, b
  ld [hl+],a ; set attribute

; --------------------------------
  ld a, l
  ldh [oam_ptr], a

; Display block above player's head if they have one to shoot
  ld a, [PlayerShootCooldown]
  or a
  ret nz

  ld a, e
  sub 32
  ld e, a
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ld a, $08
  ld [hl+],a ; set tile number
  xor a
  ld [hl+],a ; set attribute

  ld a, e
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ld a, $09
  ld [hl+],a ; set tile number
  xor a
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld [hl+], a ; Y position
  ld a, d
  ld [hl+], a ; X position
  ld a, $0a
  ld [hl+],a ; set tile number
  xor a
  ld [hl+],a ; set attribute

  ld a, e
  add 8
  ld [hl+], a ; Y position
  ld a, d
  add a, 8
  ld [hl+], a ; X position
  ld a, $0b
  ld [hl+],a ; set tile number
  xor a
  ld [hl+],a ; set attribute

  ld a, l
  ldh [oam_ptr], a
  ret

WalkLegAnim:
  db 4, 5
  db 6, 5
  db 4, 5
  db 4, 7

; --------------------------------
PlayerLevelCollision:
  ; Background collision
  ld h, level_map>>8
  ld b, 0 ; collision bits

  call .get_top
  call .get_left
  call .is_solid_top
  rl b
  call .get_top
  call .get_right
  call .is_solid_top
  rl b
  call .get_bottom
  call .get_left
  call .is_solid_bottom
  rl b
  call .get_bottom
  call .get_right
  call .is_solid_bottom
  rl b

  ; Set off the appropriate reaction
  ld a, b
  xor 15  ; fix the inverted carry
  add a,a ; *2 for addresses
  ld hl, .reactions
  add_hl_a
  ld a, [hl+]
  ld h, [hl]
  ld l, a
  jp hl

.get_top:
  ldh a, [PlayerPYL]
  add $80
  ldh a, [PlayerPYH]
  adc 0
.get_top_shift:
  add a
  add a
  add a
  add a
  ld l, a
  ret
.get_bottom:
  ldh a, [PlayerPYL]
  add $80
  ldh a, [PlayerPYH]
  adc 1
  jr .get_top_shift
.get_left:
  ldh a, [PlayerPXL]
  add COLLISION_OFFX
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  ret
.get_right:
  ldh a, [PlayerPXL]
  add $100 - COLLISION_OFFX
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  ret

.solid_top_instead:
  pop af
.is_solid_top: ; carry = clear if solid, set if nonsolid
  push hl
  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  cp 128
  pop hl
  ret
.going_up:
  pop af
  scf
  ret
.is_solid_bottom:
  push af
  ldh a, [PlayerVYH]
  and 128
  jr nz, .going_up

  ldh a, [PlayerPYL]
  and 128
  jr nz, .solid_top_instead
  pop af
  push hl
  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  cp 128
  pop hl
  ret
.reactions:
  dw .reaction____________
  dw .reaction__________dr
  dw .reaction_______dl___
  dw .reaction_______dl_dr
  dw .reaction____ur______
  dw .reaction____ur____dr
  dw .reaction____ur_dl___
  dw .reaction____ur_dl_dr
  dw .reaction_ul_________
  dw .reaction_ul_______dr
  dw .reaction_ul____dl___
  dw .reaction_ul____dl_dr
  dw .reaction_ul_ur______
  dw .reaction_ul_ur____dr
  dw .reaction_ul_ur_dl___
  dw .reaction_ul_ur_dl_dr

.reaction____ur_dl___:
.reaction_ul_______dr:
.reaction_ul_ur_dl_dr:
  ret

.reaction____________:
  ld a, [OfferJumpTimer]
  or a
  jp nz, OfferJumpFromGracePeriod
  ret

; Ceiling and wall
.reaction_ul_ur____dr:
  call .reaction_ul_______dr
  jp   .reaction_ul_ur______

.reaction_ul_ur_dl___:
  call .reaction_ul____dl___
  jp   .reaction_ul_ur______

; Utilities for ceiling checks
.check_ll:
  call .get_bottom
  ldh a, [PlayerPXL]
  add COLLISION_OFFX-$10
.check_l_common:
  ldh a, [PlayerPXH]
  adc L
  ld l, a
  ld a, [hl]
  jp .is_solid_top
.check_lr:
  call .get_bottom
  ldh a, [PlayerPXL]
  add $100-COLLISION_OFFX+$10
  jr .check_l_common

; Ceiling checks
.reaction_ul_________:
  ldh a, [PlayerVYH]
  and 128
  ret z

  call .check_ll
  jr nc, .reaction_ul_________skip
    xor a
    ldh [PlayerVYL],a
    ldh [PlayerVYH],a
.reaction_ul_________skip:
  call .check_lr
  jp c, .reaction_ul____dl___
  ret
.reaction____ur______:
  ldh a, [PlayerVYH]
  and 128
  ret z

  call .check_lr
  jr nc, .reaction____ur______skip
    xor a
    ldh [PlayerVYL],a
    ldh [PlayerVYH],a
.reaction____ur______skip:
  call .check_ll
  jp c, .reaction____ur____dr
  ret
.reaction_ul_ur______:
  ld a, 10
  ldh [PlayerVYL], a
  xor a
  ldh [PlayerVYH], a
  ret

; Wall+Ground reactions
.reaction_ul____dl_dr:
  call .reaction_______dl_dr
  jp   .reaction_ul____dl___

.reaction____ur_dl_dr:
  call .reaction_______dl_dr
  jp   .reaction____ur____dr

; Wall reactions
.reaction____ur____dr:
  ld a, COLLISION_OFFX
  ldh [PlayerPXL],a
  ret
.reaction_ul____dl___:
  ld a, $100 - COLLISION_OFFX
  ldh [PlayerPXL],a
;  ldh a, [PlayerPXH]
;  inc a
;  ldh [PlayerPXH],a
  ret

; Ground reactions
.reaction__________dr:
.reaction_______dl___:
.reaction_______dl_dr:
  xor a
  ldh [PlayerVYL], a
  ldh [PlayerVYH], a

  ldh a, [PlayerPYL]
  ld [PlayerScrollPYL], a
  ldh a, [PlayerPYH]
  ld [PlayerScrollPYH], a

  ldh a, [PlayerPYL]
  and 128
  jr nz, .reaction_ground_skip
    ldh a, [PlayerPYH]
    dec a
    ldh [PlayerPYH], a
.reaction_ground_skip
  ld a, 128
  ldh [PlayerPYL], a

OfferJump:
  ld a, 6
  ld [OfferJumpTimer], a
OfferJumpFromGracePeriod:
  ldh a, [KeyNew]
  and KEY_A
  ret z
  ld a, low(-$44)
  ldh [PlayerVYL],a
  ld a, high(-$44)
  ldh [PlayerVYH],a
  xor a
  ld [OfferJumpTimer], a
  ret

