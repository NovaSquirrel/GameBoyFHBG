; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "main", ROM0

MainInit:
  ld a, 4
  ld [PlayerHealth], a
  ld [EnemyLimit], a

  ld a, 7
  ld [RainbowRGBPIndex], a
  ld a, $80|$3c
  ld [RainbowRGBCIndex], a
  ld a, [RainbowLUT+0]
  ld [RainbowRGBData+0], a
  ld a, [RainbowLUT+1]
  ld [RainbowRGBData+1], a

  xor a
  ldh [LevelComplete], a
  ldh [LevelCompleteTimer], a

  ; Write the paused text
  ld hl, PausedText
  ld de, SCREEN2+7
  ld c, 6
  call memcpy8

  ; On the Game Boy Color, make the paused text inverted
  ldh a, [IsGameBoyColor]
  cp $11
  jr nz, .NotColor
  ; Second VRAM bank
  ld a, 1
  ldh [$ff4f], a
  ; Palette 7
  ld hl, SCREEN2
  ld a, 7
  ld c, 20
  call memset8
  ; First VRAM bank
  xor a
  ldh [$ff4f], a
.NotColor:


  ldh a, [LevelNumber]
  call LoadLevel
  call RenderLevel
  call UploadLevelPalette

  ; Erase all initial sprites
  call ClearOAM
  ld a, sprites>>8
  call run_dma
  call InitCamera

  call ScreenOn

MainLoop:
  ; Do graphical updates
  call wait_vblank
  ld a, sprites>>8
  call run_dma
  ldh a, [CameraPX]
  ldh [rSCX], a
  ldh a, [CameraPY]
  ldh [rSCY], a
  call RainbowCopy

  ; Clear sprites
  call ClearOAM

  ; Run game loop stuff
  call readkeys
  call AdjustCamera
  call RunPlayer
  call RunActors

  ; Are there more enemies to spawn in?
  ldh a, [retraces]
  and 63
  jr nz, .no_spawn_enemy
  ld hl, EnemyLimit
  ld a, [EnemyCount]
  cp [hl]
  jr nc, .no_spawn_enemy

  ldh a, [EnemyList+0]
  ld e, a
  ldh a, [EnemyList+1]
  ld d, a
  ld a, [de]
  or a
  jr nz, .not_end_of_list

  ; If it's not a chip level, stop spawning enemies
  ldh a, [IsChipLevel]
  or a
  jr nz, .is_chip_level

  ; Have all enemies been defeated?
  ld h, actors>>8
  ld l, 0
.enemy_scan_loop:
  ld a, [hl]
  or a
  jr nz, .no_spawn_enemy
  ld a, l
  add 16
  ld l, a
  jr nz, .enemy_scan_loop

  ; Mark the level complete
  ld a, 1
  ldh [LevelComplete], a
  jr .no_spawn_enemy
.is_chip_level

  ; If it is, move to the start of the list
  ldh a, [EnemyListStart+0]
  ld e, a
  ldh a, [EnemyListStart+1]
  ld d, a
.not_end_of_list:

  call EnemyFindFree
  jr nc, .no_spawn_enemy

  ; Randomly face left or right
  call GetRandomNumber
  and 128
  ld b, a
  ld a, [de] ; Reread enemy type
  or b
  ld [hl+], a

  ; Move up to X position low
  inc l
  inc l
  inc l
  inc l
  ; Set X position 
  ld a, $80
  ld [hl+], a
  ld a, 7
  ld [hl+], a

  ; Write the incremented pointer back
  inc de
  ld a, e
  ldh [EnemyList+0], a
  ld a, d
  ldh [EnemyList+1], a
.no_spawn_enemy:

  ; Move OAM pointer ahead to make room for health
  ld h, sprites>>8
  ldh a, [oam_ptr]
  ld l, a
  add 4
  ldh [oam_ptr], a
  ; Display health count
  ld a, 16+2
  ld [hl+], a
  ld a, 8+2
  ld [hl+], a
  ld a, [PlayerHealth]
  or $80
  ld [hl+], a
  xor a
  ld [hl+], a



  ; If the level is complete, run up a timer
  ; and then exit it
  ldh a, [LevelComplete]
  or a
  jr z, .not_complete
  ldh a, [LevelCompleteTimer]
  inc a
  ldh [LevelCompleteTimer], a
  cp 30
  jr nc, NextLevel
.not_complete:


  ldh a, [KeyNew]
  and KEY_SELECT
  jr z, NextLevel.not_skip
NextLevel:
  ldh a, [LevelNumber]
  inc a
  ldh [LevelNumber], a
  call ScreenOff
  jp MainInit
.not_skip:


  ldh a, [KeyNew]
  and KEY_START
  jp z, MainLoop
Paused:
  call wait_vblank

  ld a, 7
  ldh [rWX], a
  ld a, 144-8
  ldh [rWY], a
  ld a, LCDCF_ON|LCDCF_OBJ8|LCDCF_OBJON|LCDCF_BGON|LCDCF_BG8800|LCDCF_WINON|LCDCF_WIN9C00
  ldh [rLCDC],a

.loop:
  call wait_vblank
  call readkeys
  ldh a, [KeyNew]
  and KEY_START
  jr z, .loop

  ld a, LCDCF_ON|LCDCF_OBJ8|LCDCF_OBJON|LCDCF_BGON|LCDCF_BG8800
  ldh [rLCDC],a
  jp MainLoop

PausedText:
  db "Paused"
