; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "camera", ROM0

InitCamera:
  ;X
  ldh a, [PlayerPXL]
  ld e, a
  ldh a, [PlayerPXH]
  sub 10/2
  jr nc, .not_snap_l
    xor a
    ldh [CameraX], a
.not_snap_l:
  cp 16-10
  jr c, .not_snap_r
    xor a
    ldh [CameraX], a
    ld a, 16-10
.not_snap_r:
  ldh [CameraX+1], a

  ldh a, [CameraLimitBottom]
  ld b, a

  ; Y
  ld a, [PlayerPYL]
  ldh [CameraY], a
  ld a, [PlayerPYH]
  sub 9/2
  jr nc, .not_snap_u
    xor a
    ldh [CameraY], a
.not_snap_u:
  cp b ; Compare against limit
  jr c, .not_snap_d
    xor a
    ldh [CameraY], a
    ld a, b ; Set to limit
.not_snap_d:
  ldh [CameraY+1], a

  jp AdjustCamera.convert


AdjustCamera:
  ; Get scroll target
  ldh a, [PlayerPXL]
  ld e, a
  ldh a, [PlayerPXH]
  sub 10/2
  jr nc, .not_snap_l
    xor a
    ld e, a
.not_snap_l:
  cp 16-10
  jr c, .not_snap_r
    xor a
    ld e, a
    ld a, 16-10
.not_snap_r:
  ld d, a

  ; Find difference
  ldh a, [CameraX+0]
  ld l, a
  ldh a, [CameraX+1]
  ld h, a

  ld a, e
  sub l
  ld l, a
  ld a, d
  sbc h
  ld h, a

  ; Divide by 4
  ld a, l
  rept 4
  sra h
  rra
  endr
  ld l, a

  ldh a, [CameraX+0]
  add l
  ldh [CameraX+0], a
  ldh a, [CameraX+1]
  adc h
  ldh [CameraX+1], a

; ---------------------------------------

  ; Get scroll target
  ld a, [PlayerScrollPYL]
  ld e, a
  ld a, [PlayerScrollPYH]
  sub 9/2
  jr nc, .not_snap_u
    xor a
    ld e, a
.not_snap_u:
  ld hl, CameraLimitBottom
  cp [hl] ; Compare against limit
  jr c, .not_snap_d
    xor a
    ld e, a
    ld a, [hl] ; Set to limit
.not_snap_d:
  ld d, a

  ; Find difference
  ldh a, [CameraY+0]
  ld l, a
  ldh a, [CameraY+1]
  ld h, a

  ld a, e
  sub l
  ld l, a
  ld a, d
  sbc h
  ld h, a

  ; Divide by 4
  ld a, l
  rept 4
  sra h
  rra
  endr
  ld l, a

  ldh a, [CameraY+0]
  add l
  ldh [CameraY+0], a
  ldh a, [CameraY+1]
  adc h
  ldh [CameraY+1], a

; ---------------------------------------

.convert:
  ; Convert camera to pixel coordinates
  ldh a, [CameraX+1]
  ld b, a
  ldh a, [CameraX+0]
  rept 4
    srl b
    rra
  endr
  adc 0
  ldh [CameraPX+0], a
  ld a, b
  ldh [CameraPX+1], a

  ldh a, [CameraY+1]
  ld b, a
  ldh a, [CameraY+0]
  rept 4
    srl b
    rra
  endr
  adc 0
  ldh [CameraPY+0], a
  ld a, b
  ldh [CameraPY+1], a
  ret

NegateDE:
  xor a
  sub e
  ld e, a
  ld a, 0
  sbc d
  ld d, a
  ret
