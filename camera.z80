; FHBG GB
;
; Copyright 2018 NovaSquirrel
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
;

SECTION "camera", ROM0

InitCamera:
  ;X
  ldh a, [PlayerPXL]
  ld e, a
  ldh a, [PlayerPXH]
  sub 10/2
  jr nc, .not_snap_l
    xor a
    ldh [CameraX], a
.not_snap_l:
  cp 16-10
  jr c, .not_snap_r
    xor a
    ldh [CameraX], a
    ld a, 16-10
.not_snap_r:
  ldh [CameraX+1], a

  ldh a, [CameraLimitBottom]
  ld b, a

  ; Y
  ld a, [PlayerPYL]
  ldh [CameraY], a
  ld a, [PlayerPYH]
  sub 9/2
  jr nc, .not_snap_u
    xor a
    ldh [CameraY], a
.not_snap_u:
  cp b ; Compare against limit
  jr c, .not_snap_d
    xor a
    ldh [CameraY], a
    ld a, b ; Set to limit
.not_snap_d:
  ldh [CameraY+1], a

  jp AdjustCamera.convert


AdjustCamera:
  ; Get scroll target
  ldh a, [PlayerPXL]
  ld e, a
  ldh a, [PlayerPXH]
  sub 10/2
  jr nc, .not_snap_l
    xor a
    ld e, a
.not_snap_l:
  cp 16-10
  jr c, .not_snap_r
    xor a
    ld e, a
    ld a, 16-10
.not_snap_r:
  ld d, a

  ; Find difference
  ldh a, [CameraX+0]
  ld l, a
  ldh a, [CameraX+1]
  ld h, a

  ld a, e
  sub l
  ld l, a
  ld a, d
  sbc h
  ld h, a

  ; Divide by 4
  ld a, l
  rept 4
  sra h
  rra
  endr
  ld l, a

  ldh a, [CameraX+0]
  add l
  ldh [CameraX+0], a
  ldh a, [CameraX+1]
  adc h
  ldh [CameraX+1], a

; ---------------------------------------

  ; Get scroll target
  ld a, [PlayerScrollPYL]
  ld e, a
  ld a, [PlayerScrollPYH]
  sub 9/2
  jr nc, .not_snap_u
    xor a
    ld e, a
.not_snap_u:
  ld hl, CameraLimitBottom
  cp [hl] ; Compare against limit
  jr c, .not_snap_d
    xor a
    ld e, a
    ld a, [hl] ; Set to limit
.not_snap_d:
  ld d, a

  ; Find difference
  ldh a, [CameraY+0]
  ld l, a
  ldh a, [CameraY+1]
  ld h, a

  ld a, e
  sub l
  ld l, a
  ld a, d
  sbc h
  ld h, a

  ; Divide by 4
  ld a, l
  rept 4
  sra h
  rra
  endr
  ld l, a

  ldh a, [CameraY+0]
  add l
  ldh [CameraY+0], a
  ldh a, [CameraY+1]
  adc h
  ldh [CameraY+1], a

; ---------------------------------------

.convert:
  ; Convert camera to pixel coordinates
  ldh a, [CameraX+1]
  ld b, a
  ldh a, [CameraX+0]
  rept 4
    srl b
    rra
  endr
  adc 0
  ldh [CameraPX+0], a
  ld a, b
  ldh [CameraPX+1], a

  ldh a, [CameraY+1]
  ld b, a
  ldh a, [CameraY+0]
  rept 4
    srl b
    rra
  endr
  adc 0
  ldh [CameraPY+0], a
  ld a, b
  ldh [CameraPY+1], a
  ret

NegateDE:
  xor a
  sub e
  ld e, a
  ld a, 0
  sbc d
  ld d, a
  ret
