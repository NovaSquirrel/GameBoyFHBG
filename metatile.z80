; FHBG GB
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

SECTION "metatiles", ROM0

META_SOLID_ALL = $c0 ; top two bits
META_SOLID_TOP = $40 ; second to top bit only
META_COLOR0 = $00
META_COLOR1 = $01
META_COLOR2 = $02
META_COLOR3 = $03
META_COLOR4 = $04
META_COLOR5 = $05
META_COLOR6 = $06
META_COLOR7 = $07
META_COLOR_MASK = $07

MetatileFlags:
  ; empty
  db 0
  ; solid block
  db META_SOLID_ALL|META_COLOR2
  ; grass/dirt block
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  db META_SOLID_ALL|META_COLOR1
  ; water
  db META_COLOR4
  db META_COLOR4
  ; ladder
  db META_COLOR3
  ; spring unpressed
  db META_COLOR2
  ; spring pressed
  db META_COLOR2
  ; lock
  db META_SOLID_ALL|META_COLOR2
  ; fence
  db META_COLOR3
  ; grass
  db META_COLOR1
  ; flower 1
  db META_COLOR1
  ; flower 2
  db META_COLOR1
  ; solid platform
  db META_SOLID_TOP
  db META_SOLID_TOP
  db META_SOLID_TOP
  db META_SOLID_TOP
  ; fallthrough platform
  db META_SOLID_TOP
  db META_SOLID_TOP
  db META_SOLID_TOP
  db META_SOLID_TOP
  ; checker block
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL
  db META_SOLID_ALL

Metatiles:
  ; empty
  db "    "
  ; solid block
  db $d2, $d3, $e2, $e3
  ; grass/dirt block
  db $f0, $f2, $f9, $fb ; ....
  db $f0, $f2, $e0, $e1 ; ...d
  db $e0, $e1, $f9, $fb ; ..u.
  db $e0, $e1, $e0, $e1 ; ..ud
  db $f0, $f1, $f9, $fa ; .r..
  db $f0, $f1, $e0, $f3 ; .r.d
  db $e0, $f3, $f9, $fa ; .ru.
  db $e0, $f3, $e0, $f3 ; .rud
  db $f1, $f2, $fa, $fb ; l...
  db $f1, $f2, $f3, $e1 ; l..d
  db $f3, $e1, $fa, $fb ; l.u.
  db $f3, $e1, $f3, $e1 ; l.ud
  db $f1, $f1, $fa, $fa ; lr..
  db $f1, $f1, $f3, $f3 ; lr.d
  db $f3, $f3, $fa, $fa ; lru.
  db $f3, $f3, $f3, $f3 ; lrud

  ; water
  db $ff, $ff, $ff, $ff ; main
  db $fe, $fe, $ff, $ff ; top

  ; ladder
  db $f7, $f8, $f7, $f8
  ; spring unpressed
  db "  ", $b4, $b5
  ; spring pressed
  db "  ", $c4, $c5
  ; lock
  db $b6, $b7, $c6, $c7

  ; fence
  db $b8, $b9, $c8, $c9
  ; grass
  db "  ", $ba, $bb
  ; flower 1
  db $bc, $bd, $ca, $cb
  ; flower 2
  db $cc, $cd, $ca, $cb

  ; solid platform
  db $d7, $d9, "  "
  db $d8, $d9, "  " ;l
  db $d7, $d8, "  " ;r
  db $d8, $d8, "  " ;lr
  ; fallthrough platform
  db $e7, $e9, "  "
  db $e8, $e9, "  " ;l
  db $e7, $e8, "  " ;r
  db $e8, $e8, "  " ;lr
  ; checker block
  db $d4, $d6, $f4, $f6 ; ....
  db $d4, $d6, $e4, $e6 ; ...d
  db $e4, $e6, $f4, $f6 ; ..u.
  db $e4, $e6, $e4, $e6 ; ..ud
  db $d4, $d5, $f4, $f5 ; .r..
  db $d4, $d5, $e4, $e5 ; .r.d
  db $e4, $e5, $f4, $f5 ; .ru.
  db $e4, $e5, $e4, $e5 ; .rud
  db $d5, $d6, $f5, $f6 ; l...
  db $d5, $d6, $e5, $e6 ; l..d
  db $e5, $e6, $f5, $f6 ; l.u.
  db $e5, $e6, $e5, $e6 ; l.ud
  db $d5, $d5, $f5, $f5 ; lr..
  db $d5, $d5, $e5, $e5 ; lr.d
  db $e5, $e5, $f5, $f5 ; lru.
  db $e5, $e5, $e5, $e5 ; lrud


IsNotBlock:
  ; shift in a 0
  sla b
  ret
IsChecker:
  ld a, [hl]
  cp BLOCK_CHECKER
  jr c, IsNotBlock
  cp BLOCK_CHECKER_LRUD+1
  jr nc, IsNotBlock
  ; shift in a 1
  scf
  rl b
  ret
IsDirt:
  ld a, [hl]
  cp BLOCK_DIRT
  jr c, IsNotBlock
  cp BLOCK_DIRT_LRUD+1
  jr nc, IsNotBlock
  ; shift in a 1
  scf
  rl b
  ret
IsPlatform:
  ld a, [hl]
  cp BLOCK_PLATFORM
  jr c, IsNotBlock
  cp BLOCK_PLATFORM_LR+1
  jr nc, IsNotBlock
  ; shift in a 1
  scf
  rl b
  ret
IsFallPlatform:
  ld a, [hl]
  cp BLOCK_FALL_PLATFORM
  jr c, IsNotBlock
  cp BLOCK_FALL_PLATFORM_LR+1
  jr nc, IsNotBlock
  ; shift in a 1
  scf
  rl b
  ret

ApplyAutotile:
  ld hl, level_map
.loop:
  ld a, [hl]
  cp BLOCK_CHECKER
  jr nz, .not_checker
  ; Figure out which checker block to use
  ld b, 0
  push hl
    ; Left
    dec l
    call IsChecker
    ; Right
    inc l
    inc l
    call IsChecker
    ; Up
    ld a, l
    sub 17
    ld l, a
    call IsChecker
    ; Down
    ld a, l
    add 32
    ld l, a
    call IsChecker
  pop hl
  ld a, BLOCK_CHECKER
  add b
  ld [hl], a
.not_checker:

  cp BLOCK_DIRT
  jr nz, .not_dirt
  ; Figure out which checker block to use
  ld b, 0
  push hl
    ; Left
    dec l
    call IsDirt
    ; Right
    inc l
    inc l
    call IsDirt
    ; Up
    ld a, l
    sub 17
    ld l, a
    call IsDirt
    ; Down
    ld a, l
    add 32
    ld l, a
    call IsDirt
  pop hl
  ld a, BLOCK_DIRT
  add b
  ld [hl], a
.not_dirt:

  cp BLOCK_PLATFORM
  jr nz, .not_platform
  ld b, 0
  inc l
  call IsPlatform
  dec l
  dec l
  call IsPlatform
  inc l
  ld a, BLOCK_PLATFORM
  add b
  ld [hl], a
.not_platform:

  cp BLOCK_FALL_PLATFORM
  jr nz, .not_fall_platform
  ld b, 0
  inc l
  call IsFallPlatform
  dec l
  dec l
  call IsFallPlatform
  inc l
  ld a, BLOCK_FALL_PLATFORM
  add b
  ld [hl], a
.not_fall_platform:

  cp BLOCK_FLOWER1
  jr nz, .not_flower
  call GetRandomNumber
  rra
  jr c, .not_flower
  ld [hl], BLOCK_FLOWER2
.not_flower:

  cp BLOCK_WATER
  jr nz, .not_water
  ; Check tile above
  ld a, l
  sub 16
  ld c, a
  ld b, level_map>>8
  ld a, [bc]
  cp BLOCK_WATER
  jr z, .not_water
  cp BLOCK_WATER_TOP
  jr z, .not_water
  ld a, BLOCK_WATER_TOP
  ld [hl], a
.not_water:

  inc l
  jp nz, .loop
  ret

RenderLevel:
  call ApplyAutotile

  ld bc, level_map
  ld de, SCREEN1
.loop:
  ; get tile
  ld a, [bc]
  add a
  add a

  ld hl, Metatiles
  add_hl_a
  ld a, [hl+]
  ld [de], a
  inc e

  ld a, [hl+]
  ld [de], a
  ld a, e
  add 31
  ld e, a
  
  ld a, [hl+]
  ld [de], a
  inc e

  ld a, [hl]
  ld [de], a
  ld a, e
  sub 31
  ld e, a

  ; next block
  inc c
  jr z, .exit

  ; next row of blocks?
  ld a, c
  and $0f
  jr nz, .loop

  ; next row, move DE down
  ld hl, 32
  add hl, de
  ld d, h
  ld e, l
  
  jr .loop
.exit:

  ldh a, [IsGameBoyColor]
  cp $11
  ret nz

RenderLevelColor:
  ; Second VRAM bank
  ld a, 1
  ldh [$ff4f], a

  ld bc, level_map
  ld de, SCREEN1
.loop:
  ; get tile
  ld a, [bc]

  cp BLOCK_FLOWER1
  jr z, .is_flowers
  cp BLOCK_FLOWER2
  jr z, .is_flowers

  ld hl, MetatileFlags
  add_hl_a
  ld a, [hl]
  and META_COLOR_MASK
  ld [de], a
  inc e

  ld [de], a
  push af
  ld a, e
  add 31
  ld e, a
  pop af
  
  ld [de], a
  inc e

  ld [de], a
  ld a, e
  sub 31
  ld e, a

.next_block:
  ; next block
  inc c
  jr z, .exit

  ; next row of blocks?
  ld a, c
  and $0f
  jr nz, .loop

  ; next row, move DE down
  ld hl, 32
  add hl, de
  ld d, h
  ld e, l
  
  jr .loop
.exit:
  xor a
  ldh [$ff4f], a
  ret

.is_flowers:
  ld a, META_COLOR2
  ld [de], a
  inc e

  ld [de], a
  ld a, e
  add 31
  ld e, a
  
  ld a, META_COLOR1
  ld [de], a
  inc e

  ld [de], a
  ld a, e
  sub 31
  ld e, a
  jr .next_block
